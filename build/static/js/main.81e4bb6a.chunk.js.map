{"version":3,"sources":["components/FormContact/FormContact.jsx","components/ContactList/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/App/App.jsx","index.js","components/FormContact/FormContact.module.css","components/ContactList/ContactListItem/ContactListItem.module.css","components/Filter/Filter.module.css"],"names":["FormContact","onSubmit","useState","name","setName","number","setNumber","handleChange","e","currentTarget","value","resetState","className","s","form","preventDefault","label","input_name","type","pattern","onChange","title","required","input_number","button","btnText","ContactListItem","contactName","contactNumber","onClickDeleteContact","listItem","listItemText","onClick","ContactList","contacts","onDeleteContact","map","id","Filter","filterInput","App","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","find","contact","alert","newContact","nanoid","toLowerCase","includes","contactId","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.81e4bb6a.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './FormContact.module.css';\r\n\r\nfunction FormContact({ onSubmit }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    onSubmit(name, number);\r\n    resetState();\r\n  };\r\n\r\n  const resetState = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit}>\r\n      <label className={s.label}>\r\n        Name\r\n        <input\r\n          className={s.input_name}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          value={name}\r\n          onChange={handleChange}\r\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n          required\r\n        />\r\n      </label>\r\n      <label className={s.label}>\r\n        Number\r\n        <input\r\n          className={s.input_number}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          value={number}\r\n          onChange={handleChange}\r\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <button className={s.button} type=\"submit\">\r\n        <span className={s.btnText}>Add contact</span>\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\n// class FormContact extends Component {\r\n\r\n//   state = {\r\n//     name: '',\r\n//     number: '',\r\n//   };\r\n\r\n//   handleChange = e => {\r\n//     const { name, value } = e.currentTarget;\r\n//     this.setState({ [name]: value });\r\n//   };\r\n\r\n//   handleSubmit = e => {\r\n//     const { name, number } = this.state;\r\n//     e.preventDefault();\r\n//     this.props.onSubmit(name, number);\r\n//     this.resetState();\r\n//   };\r\n\r\n//   resetState = () => {\r\n//     this.setState({\r\n//       name: '',\r\n//       number: '',\r\n//     });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <form className={s.form} onSubmit={this.handleSubmit}>\r\n//         <label className={s.label}>\r\n//           Name\r\n//           <input\r\n//             className={s.input_name}\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//             value={this.state.name}\r\n//             onChange={this.handleChange}\r\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n//             required\r\n//           />\r\n//         </label>\r\n//         <label className={s.label}>\r\n//           Number\r\n//           <input\r\n//             className={s.input_number}\r\n//             type=\"tel\"\r\n//             name=\"number\"\r\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//             value={this.state.number}\r\n//             onChange={this.handleChange}\r\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n//             required\r\n//           />\r\n//         </label>\r\n\r\n//         <button className={s.button} type=\"submit\">\r\n//           <span className={s.btnText}>Add contact</span>\r\n//         </button>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }\r\n\r\nFormContact.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FormContact;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactListItem.module.css';\r\n\r\nconst ContactListItem = ({\r\n  contactName,\r\n  contactNumber,\r\n  onClickDeleteContact,\r\n}) => {\r\n  return (\r\n    <li className={s.listItem}>\r\n      <span className={s.listItemText}>{contactName}:</span>\r\n      <span className={s.listItemText}>{contactNumber}</span>\r\n      <button className={s.button} type=\"button\" onClick={onClickDeleteContact}>\r\n        Delete contact\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  contactName: PropTypes.string.isRequired,\r\n  contactNumber: PropTypes.string.isRequired,\r\n  onClickDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactListItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ContactListItem from '../ContactList/ContactListItem/ContactListItem';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n  <ul>\r\n    {contacts.map(({ id, name, number }) => (\r\n      <ContactListItem\r\n        key={id}\r\n        contactName={name}\r\n        contactNumber={number}\r\n        onClickDeleteContact={() => onDeleteContact(id)}\r\n      />\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label>\r\n    Find contacts by name{' '}\r\n    <input\r\n      className={s.filterInput}\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n  </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport FormContact from '../FormContact';\r\nimport ContactList from '../ContactList';\r\nimport Filter from '../Filter';\r\n\r\nexport default function App() {\r\n  const [contacts, setContacts] = useState(() => {\r\n    return JSON.parse(window.localStorage.getItem('contacts')) ?? [];\r\n  });\r\n  const [filter, setFilter] = useState('');\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\r\n  }, [contacts]);\r\n\r\n  const addContact = (name, number) => {\r\n    if (contacts.find(contact => contact.name === name)) {\r\n      return alert(`${name} is already n contacts!`);\r\n    }\r\n    if (contacts.find(contact => contact.number === number)) {\r\n      return alert(`${number} is already belongs to another contact!`);\r\n    }\r\n\r\n    const newContact = {\r\n      id: nanoid(),\r\n      name,\r\n      number,\r\n    };\r\n\r\n    setContacts([newContact, ...contacts]);\r\n  };\r\n\r\n  const changeFilter = e => {\r\n    setFilter(e.currentTarget.value);\r\n  };\r\n\r\n  const getVisibleContacts = () => {\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  };\r\n\r\n  const deleteContact = contactId => {\r\n    setContacts(contacts.filter(contact => contact.id !== contactId));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <FormContact onSubmit={addContact} />\r\n      <h2>Contacts</h2>\r\n      <Filter value={filter} onChange={changeFilter} />\r\n      <ContactList\r\n        contacts={getVisibleContacts()}\r\n        onDeleteContact={deleteContact}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n// export default class App extends Component {\r\n//   state = {\r\n//     contacts: [\r\n//       { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n//       { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n//       { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n//       { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n//     ],\r\n//     filter: '',\r\n//   };\r\n\r\n//   #localestorageKey = 'contacts';\r\n\r\n//   componentDidMount() {\r\n//     const contacts = localStorage.getItem(this.#localestorageKey);\r\n//     const parsedContacts = JSON.parse(contacts);\r\n\r\n//     if (parsedContacts) {\r\n//       this.setState({ contacts: parsedContacts });\r\n//     }\r\n//   }\r\n\r\n//   componentDidUpdate(prevProps, prevState) {\r\n//     if (this.state.contacts !== prevState.contacts) {\r\n//       console.log('Change contacts!');\r\n//       localStorage.setItem(\r\n//         this.#localestorageKey,\r\n//         JSON.stringify(this.state.contacts),\r\n//       );\r\n//     }\r\n//   }\r\n\r\n//   addContact = (name, number) => {\r\n//     const { contacts } = this.state;\r\n//     if (contacts.find(contact => contact.name === name)) {\r\n//       return alert(`${name} is already n contacts!`);\r\n//     }\r\n//     if (contacts.find(contact => contact.number === number)) {\r\n//       return alert(`${number} is already belongs to another contact!`);\r\n//     }\r\n\r\n//     const newContact = {\r\n//       id: nanoid(),\r\n//       name,\r\n//       number,\r\n//     };\r\n\r\n//     this.setState(({ contacts }) => ({\r\n//       contacts: [newContact, ...contacts],\r\n//     }));\r\n//   };\r\n\r\n//   changeFilter = e => {\r\n//     this.setState({ filter: e.currentTarget.value });\r\n//   };\r\n\r\n//   getVisibleContacts = () => {\r\n//     const { filter, contacts } = this.state;\r\n\r\n//     return contacts.filter(contact =>\r\n//       contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n//     );\r\n//   };\r\n\r\n//   deleteContact = contactId => {\r\n//     this.setState(prevState => ({\r\n//       contacts: prevState.contacts.filter(contact => contact.id !== contactId),\r\n//     }));\r\n//   };\r\n\r\n//   render() {\r\n//     const { filter } = this.state;\r\n//     const visibleContacts = this.getVisibleContacts();\r\n\r\n//     return (\r\n//       <div>\r\n//         <h1>Phonebook</h1>\r\n//         <FormContact onSubmit={this.addContact} />\r\n//         <h2>Contacts</h2>\r\n//         <Filter value={filter} onChange={this.changeFilter} />\r\n//         <ContactList\r\n//           contacts={visibleContacts}\r\n//           onDeleteContact={this.deleteContact}\r\n//         />\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"FormContact_form__2QLTZ\",\"label\":\"FormContact_label__2Kr9i\",\"input_name\":\"FormContact_input_name__3qjwz\",\"input_number\":\"FormContact_input_number__1X0lD\",\"button\":\"FormContact_button__2ZIKo\",\"btnText\":\"FormContact_btnText__3ez7Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactListItem_listItem__mjzUB\",\"listItemText\":\"ContactListItem_listItemText__2LJHD\",\"button\":\"ContactListItem_button__3XkTQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterInput\":\"Filter_filterInput__2N5JB\"};"],"sourceRoot":""}